generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or "mysql", "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  name      String
  email     String     @unique
  password  String
  favorites Favorite[]
  cart      Cart?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Category {
  id            Int     @id @default(autoincrement())
  name          String  @unique
  description   String?
  image         String? 
  menus         Menu[]
}

model Menu {
  id            Int            @id @default(autoincrement())
  name          String
  description   String?
  price         Float
  image         String? 
  categoryId    Int
  category      Category       @relation(fields: [categoryId], references: [id])
  specialOffers SpecialOffer[]
  promotions    Promotion[]
  favorites     Favorite[]
  cartItems     CartItem[] 
  orderItems    OrderItem[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model SpecialOffer {
  id         Int      @id @default(autoincrement())
  name       String
  discount   Float // Discount percentage (e.g., 20 for 20%)
  menuId     Int
  menu       Menu     @relation(fields: [menuId], references: [id])
  validFrom  DateTime
  validUntil DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Promotion {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  menuId      Int
  menu        Menu     @relation(fields: [menuId], references: [id])
  validFrom   DateTime
  validUntil  DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Favorite {
  id        Int      @id @default(autoincrement())
  userId    Int
  menuId    Int
  user      User     @relation(fields: [userId], references: [id])
  menu      Menu     @relation(fields: [menuId], references: [id])
  createdAt DateTime @default(now())
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [id])
  cartItems CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  menuId    Int
  quantity  Int
  cart      Cart     @relation(fields: [cartId], references: [id])
  menu      Menu     @relation(fields: [menuId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  menuId    Int
  quantity  Int
  order     Order    @relation(fields: [orderId], references: [id])
  menu      Menu     @relation(fields: [menuId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id          Int          @id @default(autoincrement())
  tableNo     Int
  roomId      Int
  orderItems  OrderItem[]
  status      OrderStatus  @default(PENDING)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  transaction Transaction? // Optional, since not all orders may have transactions
}

model Transaction {
  id              Int               @id @default(autoincrement())
  orderId         Int               @unique // Add @unique here
  paymentMethodId Int
  order           Order             @relation(fields: [orderId], references: [id])
  paymentMethod   PaymentMethod     @relation(fields: [paymentMethodId], references: [id])
  amount          Float
  status          TransactionStatus @default(PENDING)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model RestaurantBranch {
  id           Int       @id @default(autoincrement())
  branchName   String
  address      String
  city         String
  state        String
  postalCode   String
  country      String
  phoneNumber  String
  email        String     @unique
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([city, state, country])
}

model PaymentMethod {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  transactions Transaction[]
}

enum OrderStatus {
  PENDING
  CONFIRMED
  CANCELED
  COMPLETED
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
}
